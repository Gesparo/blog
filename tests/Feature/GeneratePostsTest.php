<?php

namespace Tests\Unit;

use App\Generator\Generator;
use App\Post;
use App\Rating;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class GeneratePostsTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Generator::fake();
    }

    /** @test */
    public function it_should_work()
    {
        $this->sendRequest([
                'posts_limit' => 1,
                'ips_limit' => 1,
                'users_limit' => 1,
                'rating_limit' => 1,
                'rating_range_limit' => 1,
            ])
            ->assertStatus(200);

        $this->assertSame(1, Post::getQuery()->count());
        $this->assertSame(1, User::getQuery()->count());
        $this->assertSame(1, Rating::getQuery()->count());
    }

    /**
     * @dataProvider invalidRequestParamsDataProvider
     * @test
     * @param $requestParam
     * @param $invalidArgument
     */
    public function should_send_only_valid_input($requestParam, $invalidArgument)
    {
        $this->withExceptionHandling();

        $this->sendRequest([$requestParam => $invalidArgument])
            ->assertStatus(422);
    }

    public function invalidRequestParamsDataProvider()
    {
        return [
            ['posts_limit', -1],
            ['posts_limit', 0],
            ['posts_limit', 'invlalid_argument'],
            ['ips_limit', -1],
            ['ips_limit', 0],
            ['ips_limit', 'invlalid_argument'],
            ['users_limit', -1],
            ['users_limit', 0],
            ['users_limit', 'invlalid_argument'],
            ['rating_limit', -1],
            ['rating_limit', 0],
            ['rating_limit', 'invlalid_argument'],
            ['rating_range_limit', -1],
            ['rating_range_limit', 0],
            ['rating_range_limit', 'invlalid_argument'],
            ['visualization', -1],
            ['visualization', 2],
            ['visualization', 'invlalid_argument'],
        ];
    }

    /**
     * Send request to server
     *
     * @param array $data
     * @return \Illuminate\Foundation\Testing\TestResponse
     */
    private function sendRequest($data = [])
    {
        return $this->getJson(route('generator.index', $data));
    }
}
