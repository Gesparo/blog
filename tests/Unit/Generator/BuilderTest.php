<?php

namespace Tests\Unit;

use App\Generator\Builder;
use App\Generator\Generator;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class BuilderTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var Builder
     */
    protected $builder;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->builder = new Builder();
    }

    /** @test */
    public function it_should_create_instance_without_any_configuration_requirements()
    {
        $generator = $this->builder->create();

        $this->assertInstanceOf(Generator::class, $generator);

        $this->assertingPops($generator, [
            'usersAmount' => 100,
            'ipsAmount' => 100,
            'postAmount' => 100,
            'ratingsAmount' => 50,
            'ratingForOnePostLimit' => 50,
            'shouldVisualize' => false,
        ]);
    }

    /**
     * @dataProvider changePropsDataProvider
     * @test
     * @param $method
     * @param $value
     * @param $propName
     */
    public function it_can_change_props($method, $value, $propName)
    {
        $generator = $this->builder->{$method}($value);

        $this->assertingPops($generator, [$propName => $value]);
    }

    /**
     * Change prop data provider
     *
     * @return array
     */
    public function changePropsDataProvider()
    {
        return [
            ['limitUsers', 150, 'usersAmount'],
            ['limitIps', 150, 'ipsAmount'],
            ['limitPosts', 150, 'postAmount'],
            ['limitRating', 20, 'ratingsAmount'],
            ['limitRatingForOnePost', 150, 'ratingForOnePostLimit'],
            ['visualize', true, 'shouldVisualize'],
        ];
    }

    private function assertingPops($object, array $props)
    {
        foreach ($props as $name => $propValue) {
            $this->assertAttributeSame($propValue, $name, $object, "$name is not same");
        }
    }
}
